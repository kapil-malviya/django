Django comes with a set of built-in commands that can be executed using the command-line interface (CLI). Here are some of the most commonly used commands:

django-admin startproject: Creates a new Django project.
python manage.py runserver: Starts the development server.
python manage.py startapp: Creates a new Django app.
python manage.py migrate: Synchronizes the database schema with the current models and applies any pending migrations.
python manage.py makemigrations: Creates new migrations based on the changes to the models.
python manage.py createsuperuser: Creates a new superuser account.
python manage.py shell: Launches the Python interactive shell with the Django project's settings loaded.
python manage.py test: Runs the project's test suite.
python manage.py collectstatic: Collects all the static files from the apps into a single location.
These are just some of the most commonly used Django commands, and there are many more available depending on the project's requirements. You can see a full list of commands by running django-admin or python manage.py without any arguments.






D:\djangoproject>pip install Django==4.2

Collecting Django==4.2
  Downloading Django-4.2-py3-none-any.whl (8.0 MB)
     ---------------------------------------- 8.0/8.0 MB 5.3 MB/s eta 0:00:00
Collecting asgiref<4,>=3.6.0
  Downloading asgiref-3.6.0-py3-none-any.whl (23 kB)
Collecting sqlparse>=0.3.1
  Downloading sqlparse-0.4.4-py3-none-any.whl (41 kB)
     ---------------------------------------- 41.2/41.2 kB 658.4 kB/s eta 0:00:00
Collecting tzdata
  Downloading tzdata-2023.3-py2.py3-none-any.whl (341 kB)
     ---------------------------------------- 341.8/341.8 kB 3.0 MB/s eta 0:00:00
Installing collected packages: tzdata, sqlparse, asgiref, Django
Successfully installed Django-4.2 asgiref-3.6.0 sqlparse-0.4.4 tzdata-2023.3


----------------------start of project-----------------------------



D:\djangoproject>django-admin startproject firstproject


D:\djangoproject>cd firstproject


D:\djangoproject\firstproject>tree /F
Folder PATH listing for volume New Volume
Volume serial number is E0BB-BA19
D:.
│   manage.py
│
└───firstproject
        asgi.py
        settings.py
        urls.py
        wsgi.py
        __init__.py


------------------ run the server----------------------------------


D:\djangoproject\firstproject>py manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).

You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.
April 20, 2023 - 14:34:13
Django version 4.2, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

[20/Apr/2023 14:37:13] "GET / HTTP/1.1" 200 10731
[20/Apr/2023 14:37:15] "GET /static/admin/css/fonts.css HTTP/1.1" 404 1816
Not Found: /favicon.ico
[20/Apr/2023 14:37:16] "GET /favicon.ico HTTP/1.1" 404 2116
[20/Apr/2023 14:40:16] "GET / HTTP/1.1" 200 10731
[20/Apr/2023 14:40:16] "GET /static/admin/css/fonts.css HTTP/1.1" 404 1816
Not Found: /favicon.ico
[20/Apr/2023 14:40:17] "GET /favicon.ico HTTP/1.1" 404 2116



( Ctrl + c )  =>>  for breaking the server



D:\djangoproject\firstproject>py manage.py runserver 8888
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).

You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.
April 20, 2023 - 14:43:16
Django version 4.2, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8888/
Quit the server with CTRL-BREAK.

[20/Apr/2023 14:43:55] "GET / HTTP/1.1" 200 10731
[20/Apr/2023 14:43:55] "GET /static/admin/css/fonts.css HTTP/1.1" 404 1816
Not Found: /favicon.ico
[20/Apr/2023 14:43:55] "GET /favicon.ico HTTP/1.1" 404 2116
[20/Apr/2023 15:03:41] "GET /static/admin/css/fonts.css HTTP/1.1" 404 1816
[20/Apr/2023 15:06:50] "GET / HTTP/1.1" 200 10731
[20/Apr/2023 15:06:50] "GET /static/admin/css/fonts.css HTTP/1.1" 404 1816
Not Found: /favicon.ico
[20/Apr/2023 15:06:50] "GET /favicon.ico HTTP/1.1" 404 2116
[20/Apr/2023 15:52:21] "GET /static/admin/css/fonts.css HTTP/1.1" 404 1816
[20/Apr/2023 15:52:21] "GET /static/admin/css/fonts.css HTTP/1.1" 404 1816




D:\djangoproject\firstproject>py manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).

You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.
April 20, 2023 - 16:08:06
Django version 4.2, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.



-------------------create application--------------------------------------------



D:\djangoproject\firstproject>py manage.py startapp demoapp

D:\djangoproject\firstproject>


( one more folder got created named with our application name (demoapp) & inside of which multiple files created automatically by django )
( the main file for us to start with is views.py )









----------------------overview-------------------------

1-> start project
2-> start applications
3-> add this application to the project in settings.py file
4-> define view function inside views.py
5-> define url pattern for our view function inside urls.py
6-> run server       =>>   py manage.py runserver
7-> send request



http://127.0.0.1:8000/hello


-----------------------------------------------------------


1. start project
	
	django-admin startproject projectname


2. start application

	py manage.py startapp app_name


3. add application to the project inside settings.py file


4. define view functions inside views.py


5. define url patterns for our view function inside urls.py


6. run server

	py manage.py runserver


7. send request





----------------------->>> TEMPLATES <<<---------------------------------------------------------------------------------------



1. start project     =>>    django-admin startproject project_name


2. start application    =>>    py manage.py startapp application_name


3. create templates folder inside the main project folder & in that template folder 
	create a separate folder with our application name, and in that folder we've to create
	our html files (template files)


4. add applications in the settings.py file
	add template folder path inside the settings.py file

=>>

Add templates folder to settings.py file so that Django can aware of our templates.
 TEMPLATES = [
 {
 ...,
 'DIRS': ['D:\djangoproject\templateproject1\templates'],

 },]

	It is not recommended to hard code system specific locations in settings.py file. To
	overcome this problem, we can generate templates directory path programatically as follows.

 
 import os

 BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

 TEMPLATE_DIR = os.path.join(BASE_DIR,'templates')
 

	Specify this TEMPLATE_DIR inside settings.py as follows
 
 TEMPLATES = [ 
 {
 ...,

 'DIRS': [TEMPLATE_DIR,],

 },] 



5. define view functions in views.py file at application level


6. define url patterns in urls.py file either at project level or application level


7. runserver    =>>    py manage.py runserver


8. send the request



--------------------------------------------------------------------------------------------------------------------------------------------------
		To check : Whether our DB (data base) configuration is appropriate or not
--------------------------------------------------------------------------------------------------------------------------------------------------


D:\djangoproject\newsproject>py manage.py shell

Python 3.11.1 (tags/v3.11.1:a7a450f, Dec  6 2022, 19:58:39) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)

>>> from django.db import connection
>>> c=connection.cursor()
>>>



--------------------------------->> db(DATABASE)<<----------------------------------------------------------

write the model class inside models.py

makemigrations (convert into sql code) (python code to sql code)

migrate (execute sql code further) --> (database table creation)



after models.py (after creating models class)



py manage.py makemigrations

py manage.py sqlmigrate demoapp 0001  (see sql code)

py manage.py migrate



D:\djangoproject>django-admin startproject modelproject1

D:\djangoproject>cd modelproject1

D:\djangoproject\modelproject1>py manage.py startapp demoapp

D:\djangoproject\modelproject1>py manage.py makemigrations
Migrations for 'demoapp':
  demoapp\migrations\0001_initial.py
    - Create model Employee

D:\djangoproject\modelproject1>py manage.py sqlmigrate demoapp 0001       =>> for showing sql code
BEGIN;
--
-- Create model Employee
--
CREATE TABLE "demoapp_employee" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "eno" integer NOT NULL, "ename" varchar(68) NOT NULL, "esal" real NOT NULL, "eaddr" varchar(68) NOT NULL);
COMMIT;

D:\djangoproject\modelproject1>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, demoapp, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying demoapp.0001_initial... OK
  Applying sessions.0001_initial... OK

|-------------------------------------------------------------------------------------
|
| write the model class inside models.py
|    =>> define Model class by extending models.Model class inside models.py
| py manage.py makemigrations ==>> makemigrations =>> (means convert into sql code)
| if want to see sql code ==>> py manage.py sqlmigrate demoapp 0001
| migrate ==>> py manage.py migrate
|
| 
| To check whether db connection is appropriate or not : 
|   py manage.py shell
|   from django.db import connection
|   c = connection.cursor()
|
|------------------------------------------------------------------------------------


D:\djangoproject\modelproject1> py manage.py runserver

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

How to launch admin interface :  (_______/admin)
-->> in the admin interface we can check our created table
     we can perform CRUD operations on that table

& for this usename and password must require =>>

==>> 

how to create username & password ::::---->


D:\djangoproject\modelproject1> py manage.py createsuperuser




D:\djangoproject\modelproject1>py manage.py createsuperuser

Username (leave blank to use 'dell'): lordd
Email address: lord@gmail.com
Password:
Password (again):
The password is too similar to the email address.
This password is too short. It must contain at least 8 characters.
Bypass password validation and create user anyway? [y/N]: n
Password:
Password (again):
Superuser created successfully.


Now to see db table (in django admin after logging in to the django admin interface):-->

we require to do ==>> 

	Register Model to the admin interface ;

for this =>>>
	open admin.py file inside application folder & do this in that file


--------------------------------------------
from django.contrib import admin
from demoapp.models import Employee

# Register your models here.

admin.site.register(Employee)
---------------------------------------------







django = 15 [55:00]

jinja-2   ==>> syntax :

{{......}} =>> for printing (print) purpose
{%......%} =>> for processing (internally)












