from django.shortcuts import HttpResponse


class ProcessMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response
        print('\n One time initialization of ProcessMiddleware \n')

    def __call__(self, request):
        print('\n This is ProcessMiddleware before hitting the view \n')
        response = self.get_response(request)
        print('\n This is process middleware after hitting the view \n')
        return response 
    
    def process_view(request, *args, **kwargs):
        print('\n This process_view method is called just before the Django calls the View function. \n It provides an opportunity for middleware to inspect or modify the view function or its arguments')
        return HttpResponse('<h1> This response is from process_view in middlewares before entering into view </h1>')
        # return None      # if we return None, now Djnago's view function will execute
    

class ProcessExceptionMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response
        print('\n One time initialization of ProcessExceptionMiddleware \n')

    def __call__(self, request):
        print('\n This is ProcessExceptionMiddleware before hitting the view \n')
        response = self.get_response(request)
        print('\n This is ProcessExceptionMiddleware after hitting the view \n')
        return response 
    
    def process_exception(self, request, exception):
        print('\n This process_exception method is called when an exception is raised during the processing of request. \n Its purpose is to allow middleware to handle or modify the exception before Djangos default exception handeling takes over \n')
        print('\n\n-- Exception Occurred --\n')
        msg = exception
        class_name = exception.__class__.__name__
        print('class_name : ', class_name)
        print('msg : ', msg)
        return HttpResponse('<h1> msg : from process_exception from middleware </h1>')




class TemplateResponseMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response
        print('\n One time initialization of TemplateResponseMiddleware \n')

    def __call__(self, request):
        print('\n This is TemplateResponseMiddleware before hitting the view \n')
        response = self.get_response(request)
        print('\n This is TemplateResponseMiddleware after hitting the view \n')
        return response 
    
    def process_template_response(self, request, response):
        print('\n process_template_response from middleware \n')
        print('\n process_template_response method is a part of a django middleware class and it is called when a response has been generated by the view. \n This hook provides an opportunity for middleware to inspect or modify the response content before it is sent to the client. \n')

        response.context_data['name'] = 'Lord Kapil'
        return response